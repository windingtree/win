syntax = "proto3";

package videre.stays;

import "latlng.proto";
import "photo.proto";

message Connectivity {
  // Internet and WiFi options.

  // Wifi available.
  oneof wifi_available_oneof {
    bool wifi_available = 2;
    Exception wifi_available_exception = 3;
  }

  // Wifi for free.
  oneof wifi_for_free_oneof {
    bool wifi_for_free = 22;
    Exception wifi_for_free_exception = 23;
  }
}

message Policies {
  // Check in time.
  oneof check_in_time_oneof {
    // 24hr clock, e.g. "1500" or "1600", in hotel local time.
    // This is the ISO 8601 dense time format with minute precision.
    // For normalization, extended format (with colons) is not supported.
    string check_in_time = 4;
    Exception check_in_time_exception = 5;
  }

  // Check out time.
  oneof check_out_time_oneof {
    // 24hr clock, e.g. "1130" or "1200", in hotel local time.
    // This is the ISO 8601 dense time format with minute precision.
    // For normalization, extended format (with colons) is not supported.
    string check_out_time = 6;
    Exception check_out_time_exception = 7;
  }
}

/////////////////////////////
// Facility level messages //
/////////////////////////////

// ServiceProviderData.payload
message Facility {
  // name of facility
  string name = 1;
  // description
  string description = 2;
  // check-in / check-out times
  Policies policies = 14;
  // service provider's URL
  string website = 5;
  // location
  google.type.LatLng location = 6;
  // photos of the entire facility (not space-specific)
  repeated videre.type.Photo photos = 7;
  // connectivity
  optional Connectivity connectivity = 21;
}

// an item may be something like a space (ie. queen room)
// or it may be something like 'breakfast'.
message Item {
  // name of the item. Target <50 chars for English
  string name = 1;
  // description
  string description = 2;
  // what type of item this is
  ItemType type = 3;
  // photos applicable to the item
  repeated videre.type.Photo photos = 4;
  // the payload describing the item (line specific)
  // eg. may be Space message
  optional bytes payload = 5;
}

//////////////////////////
// Space level messages //
//////////////////////////

message Space {
  // space specific URL
  string website = 4;

  // Tier.
  oneof tier_oneof {
    // Standard or deluxe.
    // A non-standard tier is only permitted if at least one other unit
    // type is of a lower tier.
    SpaceTier tier = 5;
    Exception tier_exception = 6;
  }

  /////////////
  // Occupancy.

  // Max number of occupants.
  oneof max_number_of_occupants_oneof {
    int32 max_number_of_occupants = 7;
    Exception max_number_of_occupants_exception = 8;
  }

  // Max number of adult occupants.
  oneof max_number_of_adult_occupants_oneof {
    int32 max_number_of_adult_occupants = 9;
    Exception max_number_of_adult_occupants_exception = 10;
  }

  // Max number of child occupants.
  oneof max_number_of_child_occupants_oneof {
    int32 max_number_of_child_occupants = 11;
    Exception max_number_of_child_occupants_exception = 12;
  }

  /////////////////////////
  // Guest unit attributes.
  // Where possible features should be defined in GuestUnitFeatures and
  // assigned at the most precise known granularity, e.g. some/all guest
  // units, vs. a specific guest unit type vs. a living area.

  // Private home.
  oneof private_home_oneof {
    bool private_home = 13;
    Exception private_home_exception = 14;
  }

  // Suite with multiple living areas / bedrooms.
  oneof suite_oneof {
    bool suite = 19;
    Exception suite_exception = 20;
  }

  ViewsFromSpace views = 60;

  ////////////////
  // Living areas.

  // Features that cannot be associated with a particular
  // living area but are available in the guest unit type.
  // Prefer to associate with living areas when possible.
  // In general, summable numbers are summarized by taking
  // the max of (the value stored in this field) and
  // (the sum of the values for the individual living areas).
  LivingArea total_living_areas = 100;
}

//////////////////////////////////////////////
// Views available from the guest unit itself.
message ViewsFromSpace {
  // View of beach.
  oneof view_of_beach_oneof {
    bool view_of_beach = 2;
    Exception view_of_beach_exception = 3;
  }

  // View of city.
  oneof view_of_city_oneof {
    bool view_of_city = 4;
    Exception view_of_city_exception = 5;
  }

  // View of garden.
  oneof view_of_garden_oneof {
    bool view_of_garden = 6;
    Exception view_of_garden_exception = 7;
  }

  // View of lake.
  oneof view_of_lake_oneof {
    bool view_of_lake = 8;
    Exception view_of_lake_exception = 9;
  }

  // View of landmark.
  oneof view_of_landmark_oneof {
    bool view_of_landmark = 10;
    Exception view_of_landmark_exception = 11;
  }

  // View of ocean.
  oneof view_of_ocean_oneof {
    bool view_of_ocean = 12;
    Exception view_of_ocean_exception = 13;
  }

  // View of pool.
  oneof view_of_pool_oneof {
    bool view_of_pool = 14;
    Exception view_of_pool_exception = 15;
  }

  // View of valley.
  oneof view_of_valley_oneof {
    bool view_of_valley = 16;
    Exception view_of_valley_exception = 17;
  }
}

// An individual room, such as kitchen, bathroom, bedroom, within
// a bookable guest unit.
message LivingArea {
  LivingAreaFeatures features = 101;
  LivingAreaSleeping sleeping = 103;
}

message LivingAreaSleeping {
  ////////////////////
  // Bed types counts.

  // Number of beds.
  oneof number_of_beds_oneof {
    int32 number_of_beds = 2;
    Exception number_of_beds_exception = 3;
  }

  // King beds.
  oneof king_beds_oneof {
    // Including California king and super king.
    int32 king_beds = 4;
    Exception king_beds_exception = 5;
  }

  // Queen beds.
  oneof queen_beds_oneof {
    int32 queen_beds = 6;
    Exception queen_beds_exception = 7;
  }

  // Double beds.
  oneof double_beds_oneof {
    int32 double_beds = 8;
    Exception double_beds_exception = 9;
  }

  // Single or twin beds.
  oneof single_or_twin_beds_oneof {
    int32 single_or_twin_beds = 10;
    Exception single_or_twin_beds_exception = 11;
  }

  // Sofa beds.
  oneof sofa_beds_oneof {
    int32 sofa_beds = 14;
    Exception sofa_beds_exception = 15;
  }

  // Bunk beds.
  oneof bunk_beds_oneof {
    int32 bunk_beds = 16;
    Exception bunk_beds_exception = 17;
  }

  // Other beds.
  oneof other_beds_oneof {
    // Tatami, trundle, etc.
    int32 other_beds = 18;
    Exception other_beds_exception = 19;
  }

  // Roll away beds available.
  // This field is deprecated. Please use field roll_away_bed_count for the
  // number of roll away beds. Otherwise, just use field roll_away_beds for the
  // existence of roll away beds.
  oneof roll_away_beds_available_oneof {
    int32 roll_away_beds_available = 20 [deprecated = true];
    Exception roll_away_beds_available_exception = 21 [deprecated = true];
  }

  // Roll away beds.
  oneof roll_away_beds_oneof {
    bool roll_away_beds = 40;
    Exception roll_away_beds_exception = 41;
  }

  // Roll away bed count.
  oneof roll_away_bed_count_oneof {
    int32 roll_away_bed_count = 42;
    Exception roll_away_bed_count_exception = 43;
  }

  // Cribs available.
  // This field is deprecated. Please use field crib_count for the number of
  // cribs. Otherwise, just use field cribs for the existence of cribs.
  oneof cribs_available_oneof {
    int32 cribs_available = 22 [deprecated = true];
    Exception cribs_available_exception = 23 [deprecated = true];
  }

  // Cribs.
  oneof cribs_oneof {
    bool cribs = 44;
    Exception cribs_exception = 45;
  }

  // Crib count.
  oneof crib_count_oneof {
    int32 crib_count = 46;
    Exception crib_count_exception = 47;
  }
}

message LivingAreaFeatures {
  ///////////////
  // Connectivity

  // In unit Wifi available.
  oneof in_space_wifi_available_oneof {
    bool in_space_wifi_available = 62;
    Exception in_space_wifi_available_exception = 63;
  }
}

// Exception mode. Only use this if the factual information cannot be
// represented by the relevant proto field. i.e. a service is only available
// during some days of the week, or an amenity is only available seasonally.
enum Exception {
  UNSPECIFIED_REASON = 0;
}

enum SpaceTier {
  // Standard. The basic tier for this kind of unit.
  DEFAULT_STANDARD = 0;

  // Deluxe or Superior. Only allowed if another unit type is a standard tier.
  DELUXE = 1;
}

enum ItemType {
  SPACE = 0;
  OTHER = 1;
}