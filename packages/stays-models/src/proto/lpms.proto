syntax = "proto3";

package videre.stays.lpms;

import "ask.proto";
import "stub.proto";
import "person.proto";

enum Condition {
  LT = 0;
  LTE = 1;
  EQ = 2;
  GTE = 3;
  GT = 4;
}

// A generic ratio to be used to express a multiple when being applied
// to a rate, where ratio is a rational 
message Ratio {
  uint32 p = 1;
  uint32 q = 2;
}

// Store all parameters associated with a stub
// This stores essentially two structs:
// 1. The `Stub` struct which are the components that are fed to the smart contract
//    as the parameters for a booking. Notably though, Stub.params is a hash, ie.
//    it has no type, this is because it's industry agnostic. Therefore we now have:
// 2. The `Ask` struct which constitute the parameters that the user asked for.
//    this struct's contents are hashed and that becomes Stub.params.
message StubStorage {
  videre.type.Stub stub = 1;
  videre.stays.Ask params = 2;
  // personal identifiable information kept with the booking (if any)
  videre.type.Person pii = 3;
}

// Each 'space' represents a _room type_.
// Store availability, in order of priority, such that:
message Availability {
  uint32 numSpaces = 1;
}

// Specify the notice period required in order to make this booking
// 1). `facilityId` . `spaceId` . `notice_required` = space level number of days required notice
// 2). `facilityId` . `notice_required` = facility level notice requirements
message NoticeRequiredRule {
  uint32 numDays = 1;
}

message DayOfWeekLOSRuleElement {
  optional uint32 min_length_of_stay = 1;
  optional uint32 max_length_of_stay = 2;
}

// Modify the length of stay by day of week for check-in
// 1). `facilityId` . `spaceId` . `los` = specifies length of stay requirements for the space
// 2). `facilityId` . `los` = specifies the length of stay requirements for the facility
message DayOfWeekLOSRule {
  optional DayOfWeekLOSRuleElement mon = 1;
  optional DayOfWeekLOSRuleElement tue = 2;
  optional DayOfWeekLOSRuleElement wed = 3;
  optional DayOfWeekLOSRuleElement thu = 4;
  optional DayOfWeekLOSRuleElement fri = 5;
  optional DayOfWeekLOSRuleElement sat = 6;
  optional DayOfWeekLOSRuleElement sun = 7;
}

// Rates are set, in order of priority, such that:
// TODO: Allow change in rates based on adult / child pricing.
message Rates {
  uint32 cost = 1;
  uint32 includedOccupancy = 2;
}

message DayOfWeekRateModifierElement {
  oneof value_oneof {
    Ratio ratio = 1;
    int32 fixed = 2;
  }
}

// Modify the rate based on day of week when looking at base rate
// if fixed, this is to be in the same base as the quote currency
// otherwise specified as a ratio which may increase or decrease cost.
// NOTE: fixed amount is a signed integer so may be negative, or positive.
message DayOfWeekRateModifer {
  optional DayOfWeekRateModifierElement mon = 1;
  optional DayOfWeekRateModifierElement tue = 2;
  optional DayOfWeekRateModifierElement wed = 3;
  optional DayOfWeekRateModifierElement thu = 4;
  optional DayOfWeekRateModifierElement fri = 5;
  optional DayOfWeekRateModifierElement sat = 6;
  optional DayOfWeekRateModifierElement sun = 7;
}

// Modify the rate based on occupancy
// if fixed, this is to be in the same base as the quote currency
// otherwise specified as a ratio which may increase or decrease cost.
// NOTE: fixed amount is a signed integer so may be negative, or positive.
message OccupancyRateModifier {

  oneof value_oneof {
    Ratio ratio = 1;
    int32 fixed = 2;
  }

}

// Modify the rate based on the length of stay
// if fixed, this is to be in the same base as the quote currency
// otherwise specified as a ratio which may increase or decrease cost.
// NOTE: fixed amount is a signed integer so may be negative, or positive.
message LOSRateModifier {
  // condition of logic to be applied
  Condition condition = 1;
  // what length of stay is an input with the condition
  uint32 los = 2;

  // value to modify the rate by 
  oneof value_oneof {
    Ratio ratio = 3;
    int32 fixed = 4;
  }
}
